@model List<ProjectEstimator.Models.ProjectTask>
@{
    ViewData["Title"] = "Tasks";
}

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Project Tasks</h1>
                <a href="@Url.Action("Create")" class="btn btn-primary">
                    <i class="fas fa-plus"></i> Add New Task
                </a>
            </div>
        </div>
    </div>
    
    @if (Model.Any())
    {
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Description</th>
                                        <th>Optimistic</th>
                                        <th>Most Likely</th>
                                        <th>Pessimistic</th>
                                        <th>Expected</th>
                                        <th>Start Date</th>
                                        <th>End Date</th>
                                        <th>Status</th>
                                        <th>Priority</th>
                                        <th>Progress</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var task in Model)
                                    {
                                        <tr class="@(task.IsOnCriticalPath ? "table-warning" : "")">
                                            <td>
                                                <strong>@task.Name</strong>
                                                @if (task.IsOnCriticalPath)
                                                {
                                                    <span class="badge bg-warning text-dark ms-1">Critical Path</span>
                                                }
                                            </td>
                                            <td>
                                                <span class="text-muted small">@task.Description</span>
                                            </td>
                                            <td>@task.OptimisticHours h</td>
                                            <td>@task.MostLikelyHours h</td>
                                            <td>@task.PessimisticHours h</td>
                                            <td>
                                                <strong>@task.ExpectedHours.ToString("F1") h</strong>
                                            </td>
                                            <td>@(task.StartDate?.ToString("MM/dd/yyyy") ?? "Not Set")</td>
                                            <td>@(task.EndDate?.ToString("MM/dd/yyyy") ?? "Not Set")</td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(task.Status)">
                                                    @task.Status
                                                </span>
                                            </td>
                                            <td>
                                                <span class="badge @GetPriorityBadgeClass(task.Priority)">
                                                    Priority @task.Priority
                                                </span>
                                            </td>
                                            <td>
                                                <div class="progress" style="height: 20px;">
                                                    <div class="progress-bar @GetProgressBarClass(task.PercentComplete)" 
                                                         role="progressbar" 
                                                         style="width: @task.PercentComplete%"
                                                         aria-valuenow="@task.PercentComplete" 
                                                         aria-valuemin="0" 
                                                         aria-valuemax="100">
                                                        @task.PercentComplete%
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <a href="@Url.Action("Details", new { id = task.Id })" 
                                                       class="btn btn-outline-info btn-sm" 
                                                       title="View Details">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                    <a href="@Url.Action("Edit", new { id = task.Id })" 
                                                       class="btn btn-outline-primary btn-sm" 
                                                       title="Edit">
                                                        <i class="fas fa-edit"></i>
                                                    </a>
                                                    <a href="@Url.Action("Delete", new { id = task.Id })" 
                                                       class="btn btn-outline-danger btn-sm" 
                                                       title="Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </a>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-tasks fa-4x text-muted mb-3"></i>
                        <h3 class="text-muted">No Tasks Found</h3>
                        <p class="text-muted">Get started by creating your first task.</p>
                        <a href="@Url.Action("Create")" class="btn btn-primary btn-lg">
                            <i class="fas fa-plus"></i> Create First Task
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }
    
    <div class="row mt-4">
        <div class="col-md-12">
            <a href="@Url.Action("Index", "Home")" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to Dashboard
            </a>
        </div>
    </div>
</div>

@functions {
    private string GetStatusBadgeClass(ProjectEstimator.Models.TaskStatus status)
    {
        return status switch
        {
            ProjectEstimator.Models.TaskStatus.NotStarted => "bg-secondary",
            ProjectEstimator.Models.TaskStatus.InProgress => "bg-primary",
            ProjectEstimator.Models.TaskStatus.Completed => "bg-success",
            ProjectEstimator.Models.TaskStatus.Blocked => "bg-danger",
            _ => "bg-secondary"
        };
    }
    
    private string GetPriorityBadgeClass(int priority)
    {
        return priority switch
        {
            1 => "bg-danger",      // High priority
            2 => "bg-warning",     // Medium-high priority
            3 => "bg-info",        // Medium priority
            _ => "bg-secondary"    // Low priority
        };
    }
    
    private string GetProgressBarClass(double percentComplete)
    {
        return percentComplete switch
        {
            >= 75 => "bg-success",
            >= 50 => "bg-info",
            >= 25 => "bg-warning",
            _ => "bg-danger"
        };
    }
}
